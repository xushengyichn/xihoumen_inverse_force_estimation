%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Author: xushengyichn 54436848+xushengyichn@users.noreply.github.com
%Date: 2023-06-05 10:56:30
%LastEditors: xushengyichn 54436848+xushengyichn@users.noreply.github.com
%LastEditTime: 2023-06-05 16:33:01
%FilePath: \code\Main.m
%Description: Inverse calculation of vortex-induced force of Xihoumen Bridge
%
%Copyright (c) 2023 by ${git_name_email}, All Rights Reserved.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc
clear
close all
%% General Parameters
addpath(genpath("F:\git\ssm_tools"))
addpath(genpath("D:\Users\xushe\Documents\GitHub\ssm_tools"))
addpath(genpath("D:\Users\xushe\Documents\GitHub\Function_shengyi_package"))
addpath(genpath("F:\git\Function_shengyi_package"))
subStreamNumberDefault = 2132;
run('InitScript.m');
%% 0 绘图参数
fig_bool = ON;
num_figs_in_row = 5; %每一行显示几个图
figPos = figPosMedium; %图的大小，参数基于InitScript.m中的设置
%设置图片间隔
gap_between_images = [0, 0];
figureIdx = 0;

%% finite element model information for visualization
% /OUTPUT, 'nodes', txt
% NLIST
% /OUTPUT
%
% /OUTPUT, 'elements', txt
% ELIST
% /OUTPUT
[X,Y,Z,nodes,elements]=plot_FEM('nodes.txt','elements.txt');

%% modal shape

KMatrix = 'KMatrix.matrix';
MMatrix = 'MMatrix.matrix';
NODEONDECK = 'nodeondeck.txt';
Mapping = 'KMatrix.mapping';
nodegap = 'nodegap.txt';

output = ImportMK(100, 'KMatrix.matrix', 'MMatrix.matrix', 'nodeondeck.txt', 'KMatrix.mapping', 'nodegap.txt');
node_modal_shape=[nodes.NODE, nodes.X, nodes.Y, nodes.Z];
node_modal_shape_original = node_modal_shape;
Mapping_data = output.Mapping;
modal_shape_all = output.eig_vec;
mode_num  =1;
modal_shape_plot = modal_shape_all(:,mode_num);
modal_shape_plot = modal_shape_plot/max(abs(modal_shape_plot))*50;


[new_node_modal_shape,nodes_displacementMagnitude]= update_node(modal_shape_plot,Mapping_data,)

for k1= 1:length(modal_shape_plot)
    Node_temp= Mapping_data{k1,2};
    Node_DOF= Mapping_data{k1,3};
    if Node_DOF == "UX"
        Seq = find(node_modal_shape(:,1)==Node_temp);
        node_modal_shape(Seq,2) = node_modal_shape(Seq,2)+modal_shape_plot(k1);
    end
    if Node_DOF == "UY"
        Seq = find(node_modal_shape(:,1)==Node_temp);
        node_modal_shape(Seq,4) = node_modal_shape(Seq,4)+modal_shape_plot(k1);
    end%为了在matlab中绘图方便，这里注意一下，matlab中的Y轴对应的是Z轴，Z轴对应的是Y轴
    if Node_DOF == "UZ"
        Seq = find(node_modal_shape(:,1)==Node_temp);
        node_modal_shape(Seq,3) = node_modal_shape(Seq,3)+modal_shape_plot(k1);
    end

end
nodes_displacement = node_modal_shape(:,2:4)-node_modal_shape_original(:,2:4);
nodes_displacementMagnitude = sqrt(sum(nodes_displacement.^2, 2));

% Number of beams
numBeams = size(elements, 1);

for k1 = 1:numBeams
    % Get node indices for the i-th beam
    node1Index = elements{k1, 7};
    node2Index = elements{k1, 8};

    % Get the node coordinates
    node1(k1, :) = node_modal_shape(node_modal_shape(:, 1) == node1Index, 2:4);
    node2(k1, :) = node_modal_shape(node_modal_shape(:, 1) == node2Index, 2:4);
end
% Prepare matrix inputs for line function
X_modal_shape = [node1(:,1), node2(:,1)].'; % X coordinates of line ends
Y_modal_shape = [node1(:,2), node2(:,2)].'; % Y coordinates of line ends
Z_modal_shape = [node1(:,3), node2(:,3)].'; % Z coordinates of line ends

%% plot
%plot finite element model
[figureIdx, figPos_temp, hFigure] = create_figure(figureIdx, num_figs_in_row, figPos, gap_between_images);
% Define color, point size and marker for scatter plot
color = 'b'; % Color blue
marker = 'o'; % Circle marker
size = 15; % Size of marker
scatter3(nodes.X, nodes.Y, nodes.Z, size, color, marker, 'filled'); % scatter plot for nodes
% Define line color for beams
beamColor = 'k'; % Black color
hold on; % hold current plot
% Plot each beam
% Plot all lines at once
line(X, Y, Z, 'Color', beamColor, 'LineWidth', lineWidthThin);
% Add grids
grid on;  
% Add labels to each axis
xlabel('X'); ylabel('Y'); zlabel('Z'); 
% Add title
title('My FEM Model'); 
% View in 3D
view(45, 35.264); 
% Use equal scaling
axis equal; 
% Add light
camlight('headlight');
% Use gouraud lighting
lighting gouraud;
hold off;




% plot modal shape
[figureIdx, figPos_temp, hFigure] = create_figure(figureIdx, num_figs_in_row, figPos, gap_between_images);
% Define color, point size and marker for scatter plot
color = 'b'; % Color blue
marker = 'o'; % Circle marker
size = 15; % Size of marker
% scatter3(nodes_info.X, nodes_info.Y, nodes_info.Z, size, color, marker, 'filled'); % scatter plot for nodes
hold on
% scatter3(node_modal_shape(:,2),node_modal_shape(:,3),node_modal_shape(:,4), size, color, marker, 'filled'); % scatter plot for nodes
% Create a scatter plot using displacementMagnitude as color data
scatterHandle = scatter3(node_modal_shape(:,2), node_modal_shape(:,3), node_modal_shape(:,4), size, nodes_displacementMagnitude, marker, 'filled');

% Apply a colormap
colormap(jet);  % or use another colormap if you prefer

% Add a colorbar
colorbar;

% If needed, you can set the limits of the color scale
% caxis([minDisplacement, maxDisplacement]);  % replace with actual min and max if needed

% Define line color for beams
beamColor = 'k'; % Black color
hold on; % hold current plot
% Plot each beam
% Plot all lines at once
line(X_modal_shape, Y_modal_shape, Z_modal_shape, 'Color', beamColor, 'LineWidth', lineWidthThin);
% Add grids
grid on;  
% Add labels to each axis
xlabel('X'); ylabel('Y'); zlabel('Z'); 
% Add title
title('My FEM Model'); 
% View in 3D
view(45, 35.264); 
% view(0,0); 
% Use equal scaling
axis equal; 
% Add light
camlight('headlight');
% Use gouraud lighting
lighting gouraud;
hold off;